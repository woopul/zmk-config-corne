/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/backlight.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/rgb.h>

#define DEFAULT 0
#define LOWER   1
#define RAISE   2
#define NUMPAD  3

/ {
    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | ESC |
            // | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
            // | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | ALT  |
            //                    | GUI | LWR | SPC |   | ENT | BKSP  | RSE |

            bindings = <
&kp TAB    &kp Q  &kp W           &kp E         &kp R             &kp T        &kp Y        &kp U              &kp I        &kp O            &kp P     &kp TILDE
&kp LCTRL  &kp A  &mt LEFT_ALT S  &mt LCTRL D   &mt LEFT_SHIFT F  &kp G        &kp H        &mt RIGHT_SHIFT J  &mt RCTRL K  &mt RIGHT_ALT L  &kp SEMI  &kp SQT
&kp LSHFT  &kp Z  &kp X           &kp C         &kp V             &kp B        &kp N        &kp M              &kp COMMA    &kp DOT          &kp FSLH  &kp RALT
                                  &lt 3 ESCAPE  &kp LGUI          &lt 4 TAB    &lt 1 ENTER  &lt 2 SPACE        &kp BSPC
            >;
        };

        raise_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  | BKSP |
            // | CTRL |     |     |     |     |     |   |  -  |  =  |  [  |  ]  |  \  |  `   |
            // | SHFT |     |     |     |     |     |   |  _  |  +  |  {  |  }  | "|" |  ~   |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&kp TAB    &kp EXCL         &kp AT           &kp HASH         &kp DLLR         &kp PRCNT          &kp CARET    &kp AMPS     &kp KP_MULTIPLY  &kp LPAR  &kp RPAR  &kp BSPC
&kp LCTRL  &rgb_ug RGB_EFF  &rgb_ug RGB_EFR  &rgb_ug RGB_BRD  &rgb_ug RGB_BRI  &rgb_ug RGB_TOG    &kp MINUS    &kp EQUAL    &kp LBKT         &kp RBKT  &kp BSLH  &kp GRAVE
&kp LSHFT  &trans           &trans           &bl BL_DEC       &bl BL_INC       &bl BL_TOG         &kp UNDER    &kp PLUS     &kp LBRC         &kp RBRC  &kp PIPE  &kp TILDE
                                             &lt 3 ESCAPE  &kp LGUI          &lt 4 TAB    &lt 1 ENTER  &lt 2 SPACE        &kp BSPC
            >;
        };

        lower_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  1  |  2  |  3  |  4  |  5  |   |  7  |  7  |  8  |  9  |  0  | BKSP |
            // | BTCLR| BT1 | BT2 | BT3 | BT4 | BT5 |   |  4  |  5  |  6  | RGT |     |      |
            // | SHFT |     |     |     |     |     |   |  1  |  2  |  3  |     |     |      |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&kp TAB     &kp N1        &kp N2        &kp N3        &kp N4        &kp N5          &kp N6    &kp N7       &kp N8    &kp N9     &kp N0  &kp BSPC
&bt BT_CLR  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4    &kp LEFT  &kp DOWN     &kp UP    &kp RIGHT  &trans  &trans
&kp LSHFT   &trans        &trans        &trans        &trans        &trans          &trans    &trans       &trans    &trans     &trans  &trans
                                        &lt 3 ESCAPE  &kp LGUI      &lt 4 TAB       &kp RET   &lt 2 SPACE  &kp BSPC
            >;
        };

        numpad_layer {
            bindings = <
&trans  &trans  &trans  &trans        &trans    &trans       &kp N7  &kp N8       &kp N9    &trans  &trans  &trans
&trans  &trans  &trans  &trans        &trans    &trans       &kp N4  &kp N5       &kp N6    &trans  &trans  &trans
&trans  &trans  &trans  &trans        &trans    &trans       &kp N1  &kp N2       &kp N3    &trans  &trans  &trans
                        &lt 3 ESCAPE  &kp LGUI  &lt 4 TAB    &kp N0  &lt 2 SPACE  &kp BSPC
            >;
        };

        symbols_layer {
            bindings = <
&trans  &trans  &trans  &trans        &trans    &trans       &kp PLUS   &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp EQUAL        &trans         &trans
&trans  &trans  &trans  &trans        &trans    &trans       &kp MINUS  &kp LBRC              &kp RBRC               &kp KP_MULTIPLY  &trans         &trans
&trans  &trans  &trans  &trans        &trans    &trans       &kp UNDER  &kp LBKT              &kp RBKT               &kp KP_DIVIDE    &kp LESS_THAN  &kp GREATER_THAN
                        &lt 3 ESCAPE  &kp LGUI  &lt 4 TAB    &kp N0     &lt 2 SPACE           &kp BSPC
            >;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        navigation_condition {
            if-layers = <3 4>;
            then-layer = <2>;
        };
    };
};
